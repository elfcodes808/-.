-- Load the Ray Field GUI Library
local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()

-- Setup the GUI Window
local Window = Rayfield:CreateWindow({
    Name = "ShadowZ Fisch Hub",
    LoadingTitle = "Loading...",
    LoadingSubtitle = "By ShadowZ",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = nil,
        FileName = "ShadowZFischHubConfig"
    },
    Discord = {
        Enabled = false,
        Invite = "YourDiscordInviteLink",
        RememberJoins = true
    }
})

-- Create a Tab in the Window
local Tab = Window:CreateTab("🎣 Main", 4483362458)  -- Improved emoji for Main tab

-- Create a Misc Tab
local MiscTab = Window:CreateTab("⚙️ Misc", 4483362459)  -- Improved emoji for Misc tab

-- Create a Credits Tab
local CreditsTab = Window:CreateTab("📝 Credits", 4483362460)  -- Improved emoji for Credits tab

-- Initialize flags table
local flags = flags or {}
local characterposition = nil
local lp = game.Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local GuiService = game:GetService('GuiService')
local VirtualInputManager = game:GetService('VirtualInputManager')
local RunService = game:GetService("RunService")

-- Function to safely find the fishing rod
local function FindRod()
    return lp.Backpack:FindFirstChild("Rod")
end

local function gethrp()
    return lp.Character and lp.Character:FindFirstChild("HumanoidRootPart")
end

local function FindChild(parent, name)
    for _, child in ipairs(parent:GetChildren()) do
        if child.Name == name then
            return child
        end
    end
    return nil
end

-- Create the AutoCast Toggle
Tab:CreateToggle({
    Name = "AutoCast 🎣",
    CurrentValue = false,
    Flag = "autocast",
    Callback = function(State)
        flags['autocast'] = State
    end
})

-- Create the AutoShake Toggle
Tab:CreateToggle({
    Name = "AutoShake 🌀",
    CurrentValue = false,
    Flag = "autoshake",
    Callback = function(State)
        flags['autoshake'] = State
    end
})

-- Create the AutoReel Toggle
Tab:CreateToggle({
    Name = "AutoReel 🔄",
    CurrentValue = false,
    Flag = "autoreel",
    Callback = function(State)
        flags['autoreel'] = State
    end
})

-- Create the Infinite Oxygen Toggle in Misc Tab
MiscTab:CreateToggle({
    Name = "Infinite Oxygen 🌬️",
    CurrentValue = false,
    Flag = "infoxygen",
    Callback = function(State)
        flags['infoxygen'] = State
    end
})

-- Create Credits in Credits Tab
CreditsTab:CreateLabel("Made by ShadowZ 🖤")

-- RunService Heartbeat loop with safety checks
RunService.Heartbeat:Connect(function()
    -- AutoCast Logic - Non-stop when toggled on with randomized delays
    if flags['autocast'] then
        local args = {
            [1] = 98.39999999999988;
            [2] = 1;
        }

        local rod = workspace:WaitForChild("hjhjhjhjhhjhj53", 9e9):FindFirstChild("Flimsy Rod")
        if rod then
            local events = rod:FindFirstChild("events")
            if events then
                local castEvent = events:FindFirstChild("cast")
                if castEvent then
                    castEvent:FireServer(unpack(args))
                end
            end
        end
        task.wait(math.random(1, 2))  -- Randomized delay between 1 and 2 seconds
    end

    -- AutoShake Logic - Non-stop when toggled on with randomized delays
    if flags['autoshake'] then
        local shakeUI = FindChild(lp.PlayerGui, 'shakeui')
        if shakeUI then
            local safeZone = FindChild(shakeUI, 'safezone')
            if safeZone then
                local button = FindChild(safeZone, 'button')
                if button then
                    GuiService.SelectedObject = button
                    if GuiService.SelectedObject == button then
                        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Return, false, game)
                        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Return, false, game)
                    end
                end
            end
        end
        task.wait(math.random(2, 3))  -- Randomized delay between 2 and 3 seconds
    end

    -- AutoReel Logic - Non-stop when toggled on with randomized delays
    if flags['autoreel'] then
        local args = {
            [1] = 100;
            [2] = false;
        }
        local events = ReplicatedStorage:WaitForChild("events", 9e9)
        if events then
            local reelFinished = events:FindFirstChild("reelfinished")
            if reelFinished then
                reelFinished:FireServer(unpack(args))
            end
        end
        task.wait(math.random(1, 2))  -- Randomized delay between 1 and 2 seconds
    end

    -- Infinite Oxygen Logic - Non-stop when toggled on
    if flags['infoxygen'] then
        local deathcon = nil
        -- Function to get the humanoid (character's health monitor)
        local function gethum()
            return lp.Character and lp.Character:FindFirstChild("Humanoid")
        end

        -- Function to get the character
        local function getchar()
            return lp.Character
        end

        -- Modifications for infinite oxygen
        if not deathcon then
            deathcon = gethum().Died:Connect(function()
                task.delay(9, function()
                    local divingTank = FindChild(getchar(), 'DivingTank')
                    if divingTank then
                        divingTank:Destroy()
                    end
                    local oxygentank = Instance.new('Decal')
                    oxygentank.Name = 'DivingTank'
                    oxygentank.Parent = workspace
                    oxygentank:SetAttribute('Tier', 1/0)
                    oxygentank.Parent = getchar()
                    deathcon = nil
                end)
            end)
        end
        if deathcon and gethum().Health > 0 then
            if not getchar():FindFirstChild('DivingTank') then
                local oxygentank = Instance.new('Decal')
                oxygentank.Name = 'DivingTank'
                oxygentank.Parent = workspace
                oxygentank:SetAttribute('Tier', 1/0)
                oxygentank.Parent = getchar()
            end
        end
    else
        local divingTank = FindChild(getchar(), 'DivingTank')
        if divingTank then
            divingTank:Destroy()
        end
    end
end)
