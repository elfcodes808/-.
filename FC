-- Load the Ray Field GUI Library
local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()

-- Setup the GUI Window
local Window = Rayfield:CreateWindow({
    Name = "ShadowZ Fisch Hub",
    LoadingTitle = "Loading...",
    LoadingSubtitle = "By ShadowZ",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = nil,
        FileName = "ShadowZFischHubConfig"
    },
    Discord = {
        Enabled = false,
        Invite = "YourDiscordInviteLink",
        RememberJoins = true
    }
})

-- Create Tabs
local Tab = Window:CreateTab("üé£ Main", 4483362458)  -- Main Tab
local MiscTab = Window:CreateTab("‚öôÔ∏è Misc", 4483362459)  
local CreditsTab = Window:CreateTab("üìù Credits", 4483362460)

-- Initialize flags
local flags = flags or {}
local lp = game.Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local GuiService = game:GetService('GuiService')
local VirtualInputManager = game:GetService('VirtualInputManager')
local RunService = game:GetService("RunService")

local AutoShakeDelay = 0.4  -- Built-in delay for AutoShake (set by slider)

-- Helper function to safely find children
local function FindChild(parent, name)
    for _, child in ipairs(parent:GetChildren()) do
        if child.Name == name then
            return child
        end
    end
    return nil
end

-- Helper function to simulate human-like delays with randomization
local function simulateHumanDelay(minDelay, maxDelay)
    local delay = math.random(minDelay * 100, maxDelay * 100) / 100
    task.wait(delay)
end

-- Archer Player Toggle (Freeze Player)
Tab:CreateToggle({
    Name = "Archer Player üèπ",  -- Toggle to freeze the player
    CurrentValue = false,
    Flag = "archerplayer",
    Callback = function(State)
        flags['archerplayer'] = State
    end
})

-- Function to freeze a player (Stop them from moving)
local function freezePlayer(player)
    local character = player.Character
    if character and character:FindFirstChild("HumanoidRootPart") then
        -- Create a BodyPosition to lock the player in place
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.PlatformStand = true  -- Disable movement completely
        end
    end
end

-- Function to unfreeze a player (Allow them to move)
local function unfreezePlayer(player)
    local character = player.Character
    if character and character:FindFirstChild("HumanoidRootPart") then
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.PlatformStand = false  -- Re-enable movement
        end
    end
end

-- AutoShake Delay Slider (Bottom of Main Tab)
Tab:CreateSlider({
    Name = "Auto Shake Delay",
    Range = {0.1, 5},  -- Minimum and maximum delay range
    Increment = 0.1,
    CurrentValue = 0.4,  -- Default value
    Callback = function(Value)
        AutoShakeDelay = Value  -- Set the AutoShake delay based on the slider value
    end
})

-- AutoCast Toggle
Tab:CreateToggle({
    Name = "AutoCast üé£",
    CurrentValue = false,
    Flag = "autocast",
    Callback = function(State)
        flags['autocast'] = State
    end
})

-- AutoShake Toggle
Tab:CreateToggle({
    Name = "AutoShake üåÄ",
    CurrentValue = false,
    Flag = "autoshake",
    Callback = function(State)
        flags['autoshake'] = State
    end
})

-- AutoReel Toggle
Tab:CreateToggle({
    Name = "AutoReel üîÑ",
    CurrentValue = false,
    Flag = "autoreel",
    Callback = function(State)
        flags['autoreel'] = State
    end
})

-- AutoSell Toggle
Tab:CreateToggle({
    Name = "Auto Sell üè™",
    CurrentValue = false,
    Flag = "autosell",
    Callback = function(State)
        flags['autosell'] = State
    end
})

-- Infinite Oxygen Toggle
MiscTab:CreateToggle({
    Name = "Infinite Oxygen üå¨Ô∏è",
    CurrentValue = false,
    Flag = "infoxygen",
    Callback = function(State)
        flags['infoxygen'] = State
    end
})

-- WalkSpeed Slider in Misc Tab (Max Speed 35)
MiscTab:CreateSlider({
    Name = "WalkSpeed",
    Range = {0, 35},  -- WalkSpeed range
    Increment = 1,
    CurrentValue = 16,  -- Default speed
    Callback = function(Value)
        local character = lp.Character
        if character and character:FindFirstChild("Humanoid") then
            character.Humanoid.WalkSpeed = Value  -- Set WalkSpeed to the selected value
        end
    end
})

-- Credits Tab
CreditsTab:CreateLabel("Thanks to ShadowZ for making the script!")

-- RunService Heartbeat loop
RunService.Heartbeat:Connect(function()
    -- Archer Player Functionality (Freeze player when enabled)
    if flags['archerplayer'] then
        freezePlayer(lp)  -- Freeze the local player's character
    else
        unfreezePlayer(lp)  -- Unfreeze the local player's character when disabled
    end

    -- AutoCast (Delayed Random Casts with added randomness)
    if flags['autocast'] then
        -- Apply human-like random delays
        simulateHumanDelay(1, 3)  -- Randomized delay between casts
        local args = {
            [1] = math.random(97, 99) + math.random() * 0.1,
            [2] = 1
        }
        local rod = workspace:FindFirstChild("hjhjhjhjhhjhj53")
        if rod then
            local flimsyRod = rod:FindFirstChild("Flimsy Rod")
            if flimsyRod then
                local castEvent = flimsyRod:FindFirstChild("events"):FindFirstChild("cast")
                if castEvent then
                    pcall(function() castEvent:FireServer(unpack(args)) end)
                end
            end
        end
    end

    -- AutoShake (With Custom Delay and Humanized Delays)
    if flags['autoshake'] then
        -- Apply a more varied delay based on the slider value
        simulateHumanDelay(AutoShakeDelay, AutoShakeDelay + 0.2) -- Add a slight random variation
        local shakeUI = FindChild(lp.PlayerGui, 'shakeui')
        if shakeUI then
            local safeZone = FindChild(shakeUI, 'safezone')
            if safeZone then
                local button = FindChild(safeZone, 'button')
                if button then
                    pcall(function()
                        GuiService.SelectedObject = button
                        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Return, false, game)
                        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Return, false, game)
                    end)
                end
            end
        end
    end

    -- AutoReel (With Human-Like Random Delays)
    if flags['autoreel'] then
        simulateHumanDelay(1, 3)  -- Apply random delay between reel actions
        local args = {[1] = 100, [2] = false}
        local events = ReplicatedStorage:FindFirstChild("events")
        if events then
            local reelFinished = events:FindFirstChild("reelfinished")
            if reelFinished then
                pcall(function() reelFinished:FireServer(unpack(args)) end)
            end
        end
    end

    -- AutoSell (With Randomized Delays)
    if flags['autosell'] then
        simulateHumanDelay(3, 5)  -- Random delay for each sell action
        local sellEvent = ReplicatedStorage:FindFirstChild("events") and ReplicatedStorage.events:FindFirstChild("Sell")
        if sellEvent then
            for _ = 1, math.random(1, 3) do -- Randomized loop to mimic human-like selling
                pcall(function() sellEvent:InvokeServer() end)
                task.wait(math.random(0.2, 0.5)) -- Add delay between calls
            end
        end
    end

    -- Infinite Oxygen (Bypasses Anti-Cheat)
    if flags['infoxygen'] then
        local function getchar() return lp.Character end
        if getchar() and not getchar():FindFirstChild('DivingTank') then
            local oxygentank = Instance.new('Decal')
            oxygentank.Name = 'DivingTank'
            oxygentank.Parent = workspace
            oxygentank:SetAttribute('Tier', math.huge)  -- Infinite oxygen
            oxygentank.Parent = getchar()
        end
    end
end)
